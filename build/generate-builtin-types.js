const { Client } = require('pg');
const path = require('path');
const fs = require('fs');
const config = require('../config');

/** Adapted from: https://github.com/brianc/node-pg-types/blob/master/lib/builtins.js */
const query = `
    WITH t1 AS (
        SELECT pt.oid, pt.typarray
        FROM pg_type PT
        WHERE typnamespace = (SELECT pgn.oid FROM pg_namespace pgn WHERE nspname = 'pg_catalog') -- Take only builting Postgres types with stable OID (extension types are not guaranted to be stable)
        AND typtype = 'b' -- Only basic types
        AND typelem = 0 -- Ignore aliases
        AND typisdefined -- Ignore undefined types
    )
    SELECT UPPER(PT.typname) AS name, PT.oid, PT.oid::regtype AS _name
    FROM pg_type PT
    WHERE PT.oid IN (SELECT oid FROM t1 UNION SELECT typarray FROM t1)
    AND PT.typisdefined
    ORDER BY PT.typelem ASC, PT.oid ASC
`;

const pg = new Client({
    host: config.DB_HOST,
    database: config.DB_NAME,
    user: config.DB_USER,
    password: config.DB_PASS,
    port: config.DB_PORT,
});

main();

async function main(){
    await pg.connect();
    try {
        const { rows } = await pg.query(query);
        if(rows.length < 1)
            throw new Error('Failed to obtain the required information from postgres');

        let types = [];
        for(let row of rows){
            const json = JSON.stringify({ [row.name]: '' }).replace(/"/g, `'`);
            types.push(`    /** OID: ${row.oid} (${row._name}) */\n    ${json.substring(1, json.length - 4)}: ''`);
        }

        fs.writeFileSync(path.join(__dirname, '../builtin-types.js'),
            `/** This file was auto generated by ./build/generate-builtin-types.js **/\n` +
            `module.exports = {` + 
                (types.length > 0 ? '\n' + types.join(',\n') + '\n' : '') +
            `};`
        );
    }
    finally {
        await pg.end();
    }
}